function setup(){canvas=createCanvas(1600,500),roleInput=createInput(""),roleInput.position(515,5),roleInput.size(30,15),adminPasswordInput=createInput("","password"),adminPasswordInput.position(800,5),adminPasswordInput.size(120,15),myInitButton=createButton("Initialize"),myInitButton.mousePressed(initGame),createP(""),myNextStepButton=createButton("Next Step"),myNextStepButton.mousePressed(nextStep),myNextRoundButton=createButton("Next Round"),myNextRoundButton.mousePressed(nextRound),createP(""),mySummaryButton=createButton("Summary Tables"),mySummaryButton.mousePressed(generateTables),myChartsButton=createButton("Summary Charts"),myChartsButton.mousePressed(generateCharts),createP(""),myUpdateParametersButton=createButton("Update Parameters"),myUpdateParametersButton.mousePressed(updateParameters),createP(""),retailerOrderInput=createInput(""),retailerOrderInput.position(20,450),retailerOrderInput.size(30,15),retailerQtyReceived=createInput(""),retailerQtyReceived.position(200,400),retailerQtyReceived.size(30,15),warehouseOrderInput=createInput(""),warehouseOrderInput.position(320,450),warehouseOrderInput.size(30,15),warehouseOrderReceived=createInput(""),warehouseOrderReceived.position(320,400),warehouseOrderReceived.size(30,15),warehouseQtyReceived=createInput(""),warehouseQtyReceived.position(500,400),warehouseQtyReceived.size(30,15),DCOrderInput=createInput(""),DCOrderInput.position(620,450),DCOrderInput.size(30,15),DCOrderReceived=createInput(""),DCOrderReceived.position(620,400),DCOrderReceived.size(30,15),DCQtyReceived=createInput(""),DCQtyReceived.position(800,400),DCQtyReceived.size(30,15),factoryOrderInput=createInput(""),factoryOrderInput.position(920,450),factoryOrderInput.size(30,15),factoryOrderReceived=createInput(""),factoryOrderReceived.position(920,400),factoryOrderReceived.size(30,15),factoryQtyReceived=createInput(""),factoryQtyReceived.position(1100,400),factoryQtyReceived.size(30,15),minOrderSizeInput=createInput(""),minOrderSizeInput.position(1220,480),minOrderSizeInput.size(30,15),maxOrderSizeInput=createInput(""),maxOrderSizeInput.position(1280,480),maxOrderSizeInput.size(30,15)}function draw(){displayInit()}function initGame(){switch(roundSim=0,stepInRound=0,role="NA",roleInput.value()){case"A":checkAdminPassword(),adminPasswordSuccess&&(role="Admin");break;case"R":role="Retailer";break;case"W":role="Warehouse";break;case"D":role="DC";break;case"F":role="Factory"}switch(message="New round to start!",actionReq="",orderReceivedByRetailer[roundSim]="NA",orderMadeByRetailerMinus1[roundSim]=30,orderMadeByRetailerMinus2[roundSim]=35,quantityDeliveredByRetailer[roundSim]="NA",quantityReceivedByRetailer[roundSim]="NA",inventoryRetailer[roundSim]=100,backorderRetailer[roundSim]=0,costInventoryRetailer[roundSim]="NA",cumcostInventoryRetailer[roundSim]=0,costBackorderRetailer[roundSim]="NA",cumcostBackorderRetailer[roundSim]=0,orderReceivedByWarehouse[roundSim]="NA",orderMadeByWarehouseMinus1[roundSim]=25,orderMadeByWarehouseMinus2[roundSim]=35,quantityDeliveredByWarehouseTransit1[roundSim]=25,quantityDeliveredByWarehouseTransit2[roundSim]=35,quantityReceivedByWarehouse[roundSim]="NA",inventoryWarehouse[roundSim]=100,backorderWarehouse[roundSim]=0,costInventoryWarehouse[roundSim]="NA",cumcostInventoryWarehouse[roundSim]=0,costBackorderWarehouse[roundSim]="NA",cumcostBackorderWarehouse[roundSim]=0,orderReceivedByDC[roundSim]="NA",orderMadeByDCMinus1[roundSim]=35,orderMadeByDCMinus2[roundSim]=45,quantityDeliveredByDCTransit1[roundSim]=35,quantityDeliveredByDCTransit2[roundSim]=45,quantityReceivedByDC[roundSim]="NA",inventoryDC[roundSim]=100,backorderDC[roundSim]=0,costInventoryDC[roundSim]="NA",cumcostInventoryDC[roundSim]=0,costBackorderDC[roundSim]="NA",cumcostBackorderDC[roundSim]=0,orderReceivedByFactory[roundSim]="NA",quantityDeliveredByFactoryTransit1[roundSim]=40,quantityDeliveredByFactoryTransit2[roundSim]=45,quantityInProduction1[roundSim]=40,quantityInProduction2[roundSim]=45,quantityInProduction3[roundSim]=55,inventoryFactory[roundSim]=100,backorderFactory[roundSim]=0,costInventoryFactory[roundSim]="NA",cumcostInventoryFactory[roundSim]=0,costBackorderFactory[roundSim]="NA",cumcostBackorderFactory[roundSim]=0,minOrderSize=20,maxOrderSize=80,UCInventoryRetailer=1,UCInventoryWarehouse=.75,UCInventoryDC=.5,UCInventoryFactory=.25,UCBackorderRetailer=5,UCBackorderWarehouse=2,UCBackorderDC=1.5,UCBackorderFactory=1,role){case"Admin":displayAll();break;case"Retailer":displayRetailerOnly();break;case"Warehouse":displayWarehouseOnly()}}function nextStep(){switch(role){case"Admin":nextStepAdmin();break;case"Retailer":nextStepRetailer();break;case"Warehouse":nextStepWarehouse()}}function nextStepAdmin(){switch(stepInRound){case 0:roundSim++,orderReceivedByRetailer[roundSim]="NA",orderMadeByRetailerMinus1[roundSim]=orderMadeByRetailerMinus1[roundSim-1],orderMadeByRetailerMinus2[roundSim]=orderMadeByRetailerMinus2[roundSim-1],quantityDeliveredByRetailer[roundSim]="NA",quantityReceivedByRetailer[roundSim]="NA",inventoryRetailer[roundSim]=inventoryRetailer[roundSim-1],backorderRetailer[roundSim]=backorderRetailer[roundSim-1],costInventoryRetailer[roundSim]="NA",cumcostInventoryRetailer[roundSim]=cumcostInventoryRetailer[roundSim-1],costBackorderRetailer[roundSim]="NA",cumcostBackorderRetailer[roundSim]=cumcostBackorderRetailer[roundSim-1],orderReceivedByWarehouse[roundSim]="NA",orderMadeByWarehouseMinus1[roundSim]=orderMadeByWarehouseMinus1[roundSim-1],orderMadeByWarehouseMinus2[roundSim]=orderMadeByWarehouseMinus2[roundSim-1],quantityDeliveredByWarehouseTransit1[roundSim]=quantityDeliveredByWarehouseTransit1[roundSim-1],quantityDeliveredByWarehouseTransit2[roundSim]=quantityDeliveredByWarehouseTransit2[roundSim-1],quantityReceivedByWarehouse[roundSim]="NA",inventoryWarehouse[roundSim]=inventoryWarehouse[roundSim-1],backorderWarehouse[roundSim]=backorderWarehouse[roundSim-1],costInventoryWarehouse[roundSim]="NA",cumcostInventoryWarehouse[roundSim]=cumcostInventoryWarehouse[roundSim-1],costBackorderWarehouse[roundSim]="NA",cumcostBackorderWarehouse[roundSim]=cumcostBackorderWarehouse[roundSim-1],orderReceivedByDC[roundSim]="NA",orderMadeByDCMinus1[roundSim]=orderMadeByDCMinus1[roundSim-1],orderMadeByDCMinus2[roundSim]=orderMadeByDCMinus2[roundSim-1],quantityDeliveredByDCTransit1[roundSim]=quantityDeliveredByDCTransit1[roundSim-1],quantityDeliveredByDCTransit2[roundSim]=quantityDeliveredByDCTransit2[roundSim-1],quantityReceivedByDC[roundSim]="NA",inventoryDC[roundSim]=inventoryDC[roundSim-1],backorderDC[roundSim]=backorderDC[roundSim-1],costInventoryDC[roundSim]="NA",cumcostInventoryDC[roundSim]=cumcostInventoryDC[roundSim-1],costBackorderDC[roundSim]="NA",cumcostBackorderDC[roundSim]=cumcostBackorderDC[roundSim-1],orderReceivedByFactory[roundSim]="NA",quantityDeliveredByFactoryTransit1[roundSim]=quantityDeliveredByFactoryTransit1[roundSim-1],quantityDeliveredByFactoryTransit2[roundSim]=quantityDeliveredByFactoryTransit2[roundSim-1],quantityInProduction1[roundSim]=quantityInProduction1[roundSim-1],quantityInProduction2[roundSim]=quantityInProduction2[roundSim-1],quantityInProduction3[roundSim]=quantityInProduction3[roundSim-1],inventoryFactory[roundSim]=inventoryFactory[roundSim-1],backorderFactory[roundSim]=backorderFactory[roundSim-1],costInventoryFactory[roundSim]="NA",cumcostInventoryFactory[roundSim]=cumcostInventoryFactory[roundSim-1],costBackorderFactory[roundSim]="NA",cumcostBackorderFactory[roundSim]=cumcostBackorderFactory[roundSim-1],message="New round starting!",displayAll();break;case 1:orderReceivedByWarehouse[roundSim]=orderMadeByRetailerMinus2[roundSim],message="Retailer informs Warehouse of incoming order",displayAll();break;case 2:orderReceivedByDC[roundSim]=orderMadeByWarehouseMinus2[roundSim],message="Warehouse informs DC of incoming order",displayAll();break;case 3:orderReceivedByFactory[roundSim]=orderMadeByDCMinus2[roundSim],message="DC informs Factory of incoming order",displayAll();break;case 4:quantityReceivedByDC[roundSim]=quantityDeliveredByFactoryTransit2[roundSim],message="Factory informs DC of incoming shipment",displayAll();break;case 5:quantityReceivedByWarehouse[roundSim]=quantityDeliveredByDCTransit2[roundSim],message="DC informs Warehouse of incoming shipment",displayAll();break;case 6:quantityReceivedByRetailer[roundSim]=quantityDeliveredByWarehouseTransit2[roundSim],message="Warehouse informs Retailer of incoming shipment",displayAll();break;case 7:orderReceivedByRetailer[roundSim]=Math.floor(Math.random()*(maxOrderSize-minOrderSize)+minOrderSize),message="Retailer gets new customer order",displayAll();break;case 8:quantityDeliveredByFactoryTransit2[roundSim]=quantityDeliveredByFactoryTransit1[roundSim],quantityDeliveredByFactoryTransit1[roundSim]="NA",message="Shipment advancement Factory to DC",displayAll();break;case 9:inventoryFactory[roundSim]=inventoryFactory[roundSim]+quantityInProduction3[roundSim],quantityInProduction3[roundSim]="NA",message="Quantity added to Factory inventory",displayAll();break;case 10:backorderFactory[roundSim]=backorderFactory[roundSim]+orderReceivedByFactory[roundSim],inventoryFactory[roundSim]>=backorderFactory[roundSim]?(quantityDeliveredByFactoryTransit1[roundSim]=backorderFactory[roundSim],inventoryFactory[roundSim]=inventoryFactory[roundSim]-backorderFactory[roundSim],backorderFactory[roundSim]=0):(quantityDeliveredByFactoryTransit1[roundSim]=inventoryFactory[roundSim],backorderFactory[roundSim]=backorderFactory[roundSim]-inventoryFactory[roundSim],inventoryFactory[roundSim]=0),costInventoryFactory[roundSim]=UCInventoryFactory*inventoryFactory[roundSim],cumcostInventoryFactory[roundSim]+=costInventoryFactory[roundSim],costBackorderFactory[roundSim]=UCBackorderFactory*backorderFactory[roundSim],cumcostBackorderFactory[roundSim]+=costBackorderFactory[roundSim],message="Order fulfillment and inventory update at Factory",displayAll();break;case 11:quantityInProduction3[roundSim]=quantityInProduction2[roundSim],quantityInProduction2[roundSim]=quantityInProduction1[roundSim],quantityInProduction1[roundSim]="NA",message="Production advancement at Factory",actionReq="Factory needs to enter new order!",displayAll();break;case 12:quantityInProduction1[roundSim]=parseFloat(factoryOrderInput.value()),message="New production order by Factory",actionReq="",displayAll();break;case 13:quantityDeliveredByDCTransit2[roundSim]=quantityDeliveredByDCTransit1[roundSim],quantityDeliveredByDCTransit1[roundSim]="NA",message="Shipment advancement DC to Warehouse",displayAll();break;case 14:inventoryDC[roundSim]=inventoryDC[roundSim]+quantityReceivedByDC[roundSim],message="Quantity added to DC inventory",displayAll();break;case 15:backorderDC[roundSim]=backorderDC[roundSim]+orderReceivedByDC[roundSim],inventoryDC[roundSim]>=backorderDC[roundSim]?(quantityDeliveredByDCTransit1[roundSim]=backorderDC[roundSim],inventoryDC[roundSim]=inventoryDC[roundSim]-backorderDC[roundSim],backorderDC[roundSim]=0):(quantityDeliveredByDCTransit1[roundSim]=inventoryDC[roundSim],backorderDC[roundSim]=backorderDC[roundSim]-inventoryDC[roundSim],inventoryDC[roundSim]=0),costInventoryDC[roundSim]=UCInventoryDC*inventoryDC[roundSim],cumcostInventoryDC[roundSim]+=costInventoryDC[roundSim],costBackorderDC[roundSim]=UCBackorderDC*backorderDC[roundSim],cumcostBackorderDC[roundSim]+=costBackorderDC[roundSim],message="Order fulfillment and inventory update at DC",displayAll();break;case 16:orderMadeByDCMinus2[roundSim]=orderMadeByDCMinus1[roundSim],orderMadeByDCMinus1[roundSim]="NA",message="Orders advancing at DC",actionReq="DC needs to enter new order!",displayAll();break;case 17:orderMadeByDCMinus1[roundSim]=parseFloat(DCOrderInput.value()),message="New order by DC",actionReq="",displayAll();break;case 18:quantityDeliveredByWarehouseTransit2[roundSim]=quantityDeliveredByWarehouseTransit1[roundSim],quantityDeliveredByWarehouseTransit1[roundSim]="NA",message="Shipment advancement Warehouse to Retailer",displayAll();break;case 19:inventoryWarehouse[roundSim]=inventoryWarehouse[roundSim]+quantityReceivedByWarehouse[roundSim],message="Quantity added to Warehouse inventory",displayAll();break;case 20:backorderWarehouse[roundSim]=backorderWarehouse[roundSim]+orderReceivedByWarehouse[roundSim],inventoryWarehouse[roundSim]>=backorderWarehouse[roundSim]?(quantityDeliveredByWarehouseTransit1[roundSim]=backorderWarehouse[roundSim],inventoryWarehouse[roundSim]=inventoryWarehouse[roundSim]-backorderWarehouse[roundSim],backorderWarehouse[roundSim]=0):(quantityDeliveredByWarehouseTransit1[roundSim]=inventoryWarehouse[roundSim],backorderWarehouse[roundSim]=backorderWarehouse[roundSim]-inventoryWarehouse[roundSim],inventoryWarehouse[roundSim]=0),costInventoryWarehouse[roundSim]=UCInventoryWarehouse*inventoryWarehouse[roundSim],cumcostInventoryWarehouse[roundSim]+=costInventoryWarehouse[roundSim],costBackorderWarehouse[roundSim]=UCBackorderWarehouse*backorderWarehouse[roundSim],cumcostBackorderWarehouse[roundSim]+=costBackorderWarehouse[roundSim],message="Order fulfillment and inventory update at Warehouse",displayAll();break;case 21:orderMadeByWarehouseMinus2[roundSim]=orderMadeByWarehouseMinus1[roundSim],orderMadeByWarehouseMinus1[roundSim]="NA",message="Orders advancing at Warehouse",actionReq="Warehouse needs to enter new order!",displayAll();break;case 22:orderMadeByWarehouseMinus1[roundSim]=parseFloat(warehouseOrderInput.value()),message="New order by Warehouse",actionReq="",displayAll();break;case 23:inventoryRetailer[roundSim]=inventoryRetailer[roundSim]+quantityReceivedByRetailer[roundSim],message="Quantity added to Retailer inventory",displayAll();break;case 24:backorderRetailer[roundSim]=backorderRetailer[roundSim]+orderReceivedByRetailer[roundSim],inventoryRetailer[roundSim]>=backorderRetailer[roundSim]?(quantityDeliveredByRetailer[roundSim]=backorderRetailer[roundSim],inventoryRetailer[roundSim]=inventoryRetailer[roundSim]-backorderRetailer[roundSim],backorderRetailer[roundSim]=0):(quantityDeliveredByRetailer[roundSim]=inventoryRetailer[roundSim],backorderRetailer[roundSim]=backorderRetailer[roundSim]-inventoryRetailer[roundSim],inventoryRetailer[roundSim]=0),costInventoryRetailer[roundSim]=UCInventoryRetailer*inventoryRetailer[roundSim],cumcostInventoryRetailer[roundSim]+=costInventoryRetailer[roundSim],costBackorderRetailer[roundSim]=UCBackorderRetailer*backorderRetailer[roundSim],cumcostBackorderRetailer[roundSim]+=costBackorderRetailer[roundSim],message="Order fulfillment and inventory update at Retailer",displayAll();break;case 25:orderMadeByRetailerMinus2[roundSim]=orderMadeByRetailerMinus1[roundSim],orderMadeByRetailerMinus1[roundSim]="NA",message="Orders advancing at Retailer",actionReq="Retailer needs to enter new order!",displayAll();break;case 26:orderMadeByRetailerMinus1[roundSim]=parseFloat(retailerOrderInput.value()),message="New order by Retailer",actionReq="",displayAll();break;case 27:message="End of current round!",displayAll()}27==stepInRound?stepInRound=0:stepInRound++}function nextStepRetailer(){switch(stepInRound){case 0:roundSim++,orderReceivedByRetailer[roundSim]="NA",orderMadeByRetailerMinus1[roundSim]=orderMadeByRetailerMinus1[roundSim-1],orderMadeByRetailerMinus2[roundSim]=orderMadeByRetailerMinus2[roundSim-1],quantityDeliveredByRetailer[roundSim]="NA",quantityReceivedByRetailer[roundSim]="NA",inventoryRetailer[roundSim]=inventoryRetailer[roundSim-1],backorderRetailer[roundSim]=backorderRetailer[roundSim-1],costInventoryRetailer[roundSim]="NA",cumcostInventoryRetailer[roundSim]=cumcostInventoryRetailer[roundSim-1],costBackorderRetailer[roundSim]="NA",cumcostBackorderRetailer[roundSim]=cumcostBackorderRetailer[roundSim-1],message="New round starting!",displayRetailerOnly();break;case 1:message="Retailer informs Warehouse of incoming order",actionReq="Order to transmit to Warehouse! Waiting shipment ...",displayRetailerOnly();break;case 2:message="Retailer takes note of the shipment received from Warehouse",actionReq="Quantity received to enter!",displayRetailerOnly();break;case 3:quantityReceivedByRetailer[roundSim]=parseFloat(retailerQtyReceived.value()),message="Quantity received by retailer updated",actionReq="",displayRetailerOnly();break;case 4:orderReceivedByRetailer[roundSim]=Math.floor(Math.random()*(maxOrderSize-minOrderSize)+minOrderSize),message="Retailer gets new customer order",displayRetailerOnly();break;case 5:inventoryRetailer[roundSim]=inventoryRetailer[roundSim]+quantityReceivedByRetailer[roundSim],message="Quantity added to Retailer inventory",displayRetailerOnly();break;case 6:backorderRetailer[roundSim]=backorderRetailer[roundSim]+orderReceivedByRetailer[roundSim],inventoryRetailer[roundSim]>=backorderRetailer[roundSim]?(quantityDeliveredByRetailer[roundSim]=backorderRetailer[roundSim],inventoryRetailer[roundSim]=inventoryRetailer[roundSim]-backorderRetailer[roundSim],backorderRetailer[roundSim]=0):(quantityDeliveredByRetailer[roundSim]=inventoryRetailer[roundSim],backorderRetailer[roundSim]=backorderRetailer[roundSim]-inventoryRetailer[roundSim],inventoryRetailer[roundSim]=0),costInventoryRetailer[roundSim]=UCInventoryRetailer*inventoryRetailer[roundSim],cumcostInventoryRetailer[roundSim]+=costInventoryRetailer[roundSim],costBackorderRetailer[roundSim]=UCBackorderRetailer*backorderRetailer[roundSim],cumcostBackorderRetailer[roundSim]+=costBackorderRetailer[roundSim],message="Order fulfillment and inventory update at Retailer",displayRetailerOnly();break;case 7:orderMadeByRetailerMinus2[roundSim]=orderMadeByRetailerMinus1[roundSim],orderMadeByRetailerMinus1[roundSim]="NA",message="Orders advancing at Retailer",actionReq="Retailer needs to enter new order!",displayRetailerOnly();break;case 8:orderMadeByRetailerMinus1[roundSim]=parseFloat(retailerOrderInput.value()),message="New order by Retailer",actionReq="",displayRetailerOnly();break;case 9:message="End of current round!",displayRetailerOnly()}9==stepInRound?stepInRound=0:stepInRound++}function nextStepWarehouse(){switch(stepInRound){case 0:roundSim++,orderReceivedByWarehouse[roundSim]="NA",orderMadeByWarehouseMinus1[roundSim]=orderMadeByWarehouseMinus1[roundSim-1],orderMadeByWarehouseMinus2[roundSim]=orderMadeByWarehouseMinus2[roundSim-1],quantityDeliveredByWarehouseTransit1[roundSim]=quantityDeliveredByWarehouseTransit1[roundSim-1],quantityDeliveredByWarehouseTransit2[roundSim]=quantityDeliveredByWarehouseTransit2[roundSim-1],quantityReceivedByWarehouse[roundSim]="NA",inventoryWarehouse[roundSim]=inventoryWarehouse[roundSim-1],backorderWarehouse[roundSim]=backorderWarehouse[roundSim-1],costInventoryWarehouse[roundSim]="NA",cumcostInventoryWarehouse[roundSim]=cumcostInventoryWarehouse[roundSim-1],costBackorderWarehouse[roundSim]="NA",cumcostBackorderWarehouse[roundSim]=cumcostBackorderWarehouse[roundSim-1],message="New round starting!",displayWarehouseOnly();break;case 1:message="Warehouse takes note of the order received from retailer",actionReq="Order received to enter!",displayWarehouseOnly();break;case 2:orderReceivedByWarehouse[roundSim]=parseFloat(warehouseOrderReceived.value()),message="Order received by warehouse updated",actionReq="",displayWarehouseOnly();break;case 3:message="Warehouse informs DC of incoming order",actionReq="Order to transmit to DC! Waiting shipment ...",displayWarehouseOnly();break;case 4:message="Warehouse takes note of the shipment received from DC",actionReq="Quantity received to enter!",displayWarehouseOnly();break;case 5:quantityReceivedByWarehouse[roundSim]=parseFloat(warehouseQtyReceived.value()),message="Quantity received by warehouse updated",actionReq="",displayWarehouseOnly();break;case 6:message="Warehouse informs retailer of incoming shipment",actionReq="Shipment sent to retailer ...",displayWarehouseOnly();break;case 7:quantityDeliveredByWarehouseTransit2[roundSim]=quantityDeliveredByWarehouseTransit1[roundSim],quantityDeliveredByWarehouseTransit1[roundSim]="NA",message="Shipment advancement warehouse to retailer",actionReq="",displayWarehouseOnly();break;case 8:inventoryWarehouse[roundSim]=inventoryWarehouse[roundSim]+quantityReceivedByWarehouse[roundSim],message="Quantity added to Warehouse inventory",displayWarehouseOnly();break;case 9:backorderWarehouse[roundSim]=backorderWarehouse[roundSim]+orderReceivedByWarehouse[roundSim],inventoryWarehouse[roundSim]>=backorderWarehouse[roundSim]?(quantityDeliveredByWarehouseTransit1[roundSim]=backorderWarehouse[roundSim],inventoryWarehouse[roundSim]=inventoryWarehouse[roundSim]-backorderWarehouse[roundSim],backorderWarehouse[roundSim]=0):(quantityDeliveredByWarehouseTransit1[roundSim]=inventoryWarehouse[roundSim],backorderWarehouse[roundSim]=backorderWarehouse[roundSim]-inventoryWarehouse[roundSim],inventoryWarehouse[roundSim]=0),costInventoryWarehouse[roundSim]=UCInventoryWarehouse*inventoryWarehouse[roundSim],cumcostInventoryWarehouse[roundSim]+=costInventoryWarehouse[roundSim],costBackorderWarehouse[roundSim]=UCBackorderWarehouse*backorderWarehouse[roundSim],cumcostBackorderWarehouse[roundSim]+=costBackorderWarehouse[roundSim],message="Order fulfillment and inventory update at Warehouse",displayWarehouseOnly();break;case 10:orderMadeByWarehouseMinus2[roundSim]=orderMadeByWarehouseMinus1[roundSim],orderMadeByWarehouseMinus1[roundSim]="NA",message="Orders advancing at Warehouse",actionReq="Warehouse needs to enter new order!",displayWarehouseOnly();break;case 11:orderMadeByWarehouseMinus1[roundSim]=parseFloat(warehouseOrderInput.value()),message="New order by Warehouse",actionReq="",displayWarehouseOnly();break;case 12:message="End of current round!",displayWarehouseOnly()}12==stepInRound?stepInRound=0:stepInRound++}function nextRound(){0!=stepInRound||(roundSim++,orderReceivedByRetailer[roundSim]="NA",orderMadeByRetailerMinus1[roundSim]=orderMadeByRetailerMinus1[roundSim-1],orderMadeByRetailerMinus2[roundSim]=orderMadeByRetailerMinus2[roundSim-1],quantityDeliveredByRetailer[roundSim]="NA",quantityReceivedByRetailer[roundSim]="NA",inventoryRetailer[roundSim]=inventoryRetailer[roundSim-1],backorderRetailer[roundSim]=backorderRetailer[roundSim-1],costInventoryRetailer[roundSim]="NA",cumcostInventoryRetailer[roundSim]=cumcostInventoryRetailer[roundSim-1],costBackorderRetailer[roundSim]="NA",cumcostBackorderRetailer[roundSim]=cumcostBackorderRetailer[roundSim-1],orderReceivedByWarehouse[roundSim]="NA",orderMadeByWarehouseMinus1[roundSim]=orderMadeByWarehouseMinus1[roundSim-1],orderMadeByWarehouseMinus2[roundSim]=orderMadeByWarehouseMinus2[roundSim-1],quantityDeliveredByWarehouseTransit1[roundSim]=quantityDeliveredByWarehouseTransit1[roundSim-1],quantityDeliveredByWarehouseTransit2[roundSim]=quantityDeliveredByWarehouseTransit2[roundSim-1],quantityReceivedByWarehouse[roundSim]="NA",inventoryWarehouse[roundSim]=inventoryWarehouse[roundSim-1],backorderWarehouse[roundSim]=backorderWarehouse[roundSim-1],costInventoryWarehouse[roundSim]="NA",cumcostInventoryWarehouse[roundSim]=cumcostInventoryWarehouse[roundSim-1],costBackorderWarehouse[roundSim]="NA",cumcostBackorderWarehouse[roundSim]=cumcostBackorderWarehouse[roundSim-1],orderReceivedByDC[roundSim]="NA",orderMadeByDCMinus1[roundSim]=orderMadeByDCMinus1[roundSim-1],orderMadeByDCMinus2[roundSim]=orderMadeByDCMinus2[roundSim-1],quantityDeliveredByDCTransit1[roundSim]=quantityDeliveredByDCTransit1[roundSim-1],quantityDeliveredByDCTransit2[roundSim]=quantityDeliveredByDCTransit2[roundSim-1],quantityReceivedByDC[roundSim]="NA",inventoryDC[roundSim]=inventoryDC[roundSim-1],backorderDC[roundSim]=backorderDC[roundSim-1],costInventoryDC[roundSim]="NA",cumcostInventoryDC[roundSim]=cumcostInventoryDC[roundSim-1],costBackorderDC[roundSim]="NA",cumcostBackorderDC[roundSim]=cumcostBackorderDC[roundSim-1],orderReceivedByFactory[roundSim]="NA",quantityDeliveredByFactoryTransit1[roundSim]=quantityDeliveredByFactoryTransit1[roundSim-1],quantityDeliveredByFactoryTransit2[roundSim]=quantityDeliveredByFactoryTransit2[roundSim-1],quantityInProduction1[roundSim]=quantityInProduction1[roundSim-1],quantityInProduction2[roundSim]=quantityInProduction2[roundSim-1],quantityInProduction3[roundSim]=quantityInProduction3[roundSim-1],inventoryFactory[roundSim]=inventoryFactory[roundSim-1],backorderFactory[roundSim]=backorderFactory[roundSim-1],costInventoryFactory[roundSim]="NA",cumcostInventoryFactory[roundSim]=cumcostInventoryFactory[roundSim-1],costBackorderFactory[roundSim]="NA",cumcostBackorderFactory[roundSim]=cumcostBackorderFactory[roundSim-1],orderReceivedByWarehouse[roundSim]=orderMadeByRetailerMinus2[roundSim],orderReceivedByDC[roundSim]=orderMadeByWarehouseMinus2[roundSim],orderReceivedByFactory[roundSim]=orderMadeByDCMinus2[roundSim],quantityReceivedByDC[roundSim]=quantityDeliveredByFactoryTransit2[roundSim],quantityReceivedByWarehouse[roundSim]=quantityDeliveredByDCTransit2[roundSim],quantityReceivedByRetailer[roundSim]=quantityDeliveredByWarehouseTransit2[roundSim],orderReceivedByRetailer[roundSim]=Math.floor(Math.random()*(maxOrderSize-minOrderSize)+minOrderSize),quantityDeliveredByFactoryTransit2[roundSim]=quantityDeliveredByFactoryTransit1[roundSim],quantityDeliveredByFactoryTransit1[roundSim]="NA",inventoryFactory[roundSim]=inventoryFactory[roundSim]+quantityInProduction3[roundSim],quantityInProduction3[roundSim]="NA",backorderFactory[roundSim]=backorderFactory[roundSim]+orderReceivedByFactory[roundSim],inventoryFactory[roundSim]>=backorderFactory[roundSim]?(quantityDeliveredByFactoryTransit1[roundSim]=backorderFactory[roundSim],inventoryFactory[roundSim]=inventoryFactory[roundSim]-backorderFactory[roundSim],backorderFactory[roundSim]=0):(quantityDeliveredByFactoryTransit1[roundSim]=inventoryFactory[roundSim],backorderFactory[roundSim]=backorderFactory[roundSim]-inventoryFactory[roundSim],inventoryFactory[roundSim]=0),costInventoryFactory[roundSim]=UCInventoryFactory*inventoryFactory[roundSim],cumcostInventoryFactory[roundSim]+=costInventoryFactory[roundSim],costBackorderFactory[roundSim]=UCBackorderFactory*backorderFactory[roundSim],cumcostBackorderFactory[roundSim]+=costBackorderFactory[roundSim],quantityInProduction3[roundSim]=quantityInProduction2[roundSim],quantityInProduction2[roundSim]=quantityInProduction1[roundSim],quantityInProduction1[roundSim]="NA",quantityInProduction1[roundSim]=parseFloat(factoryOrderInput.value()),quantityDeliveredByDCTransit2[roundSim]=quantityDeliveredByDCTransit1[roundSim],quantityDeliveredByDCTransit1[roundSim]="NA",inventoryDC[roundSim]=inventoryDC[roundSim]+quantityReceivedByDC[roundSim],backorderDC[roundSim]=backorderDC[roundSim]+orderReceivedByDC[roundSim],inventoryDC[roundSim]>=backorderDC[roundSim]?(quantityDeliveredByDCTransit1[roundSim]=backorderDC[roundSim],inventoryDC[roundSim]=inventoryDC[roundSim]-backorderDC[roundSim],backorderDC[roundSim]=0):(quantityDeliveredByDCTransit1[roundSim]=inventoryDC[roundSim],backorderDC[roundSim]=backorderDC[roundSim]-inventoryDC[roundSim],inventoryDC[roundSim]=0),costInventoryDC[roundSim]=UCInventoryDC*inventoryDC[roundSim],cumcostInventoryDC[roundSim]+=costInventoryDC[roundSim],costBackorderDC[roundSim]=UCBackorderDC*backorderDC[roundSim],cumcostBackorderDC[roundSim]+=costBackorderDC[roundSim],orderMadeByDCMinus2[roundSim]=orderMadeByDCMinus1[roundSim],orderMadeByDCMinus1[roundSim]="NA",orderMadeByDCMinus1[roundSim]=parseFloat(DCOrderInput.value()),quantityDeliveredByWarehouseTransit2[roundSim]=quantityDeliveredByWarehouseTransit1[roundSim],quantityDeliveredByWarehouseTransit1[roundSim]="NA",inventoryWarehouse[roundSim]=inventoryWarehouse[roundSim]+quantityReceivedByWarehouse[roundSim],backorderWarehouse[roundSim]=backorderWarehouse[roundSim]+orderReceivedByWarehouse[roundSim],inventoryWarehouse[roundSim]>=backorderWarehouse[roundSim]?(quantityDeliveredByWarehouseTransit1[roundSim]=backorderWarehouse[roundSim],inventoryWarehouse[roundSim]=inventoryWarehouse[roundSim]-backorderWarehouse[roundSim],backorderWarehouse[roundSim]=0):(quantityDeliveredByWarehouseTransit1[roundSim]=inventoryWarehouse[roundSim],backorderWarehouse[roundSim]=backorderWarehouse[roundSim]-inventoryWarehouse[roundSim],inventoryWarehouse[roundSim]=0),costInventoryWarehouse[roundSim]=UCInventoryWarehouse*inventoryWarehouse[roundSim],cumcostInventoryWarehouse[roundSim]+=costInventoryWarehouse[roundSim],costBackorderWarehouse[roundSim]=UCBackorderWarehouse*backorderWarehouse[roundSim],cumcostBackorderWarehouse[roundSim]+=costBackorderWarehouse[roundSim],orderMadeByWarehouseMinus2[roundSim]=orderMadeByWarehouseMinus1[roundSim],orderMadeByWarehouseMinus1[roundSim]="NA",orderMadeByWarehouseMinus1[roundSim]=parseFloat(warehouseOrderInput.value()),inventoryRetailer[roundSim]=inventoryRetailer[roundSim]+quantityReceivedByRetailer[roundSim],backorderRetailer[roundSim]=backorderRetailer[roundSim]+orderReceivedByRetailer[roundSim],inventoryRetailer[roundSim]>=backorderRetailer[roundSim]?(quantityDeliveredByRetailer[roundSim]=backorderRetailer[roundSim],inventoryRetailer[roundSim]=inventoryRetailer[roundSim]-backorderRetailer[roundSim],backorderRetailer[roundSim]=0):(quantityDeliveredByRetailer[roundSim]=inventoryRetailer[roundSim],backorderRetailer[roundSim]=backorderRetailer[roundSim]-inventoryRetailer[roundSim],inventoryRetailer[roundSim]=0),costInventoryRetailer[roundSim]=UCInventoryRetailer*inventoryRetailer[roundSim],cumcostInventoryRetailer[roundSim]+=costInventoryRetailer[roundSim],costBackorderRetailer[roundSim]=UCBackorderRetailer*backorderRetailer[roundSim],cumcostBackorderRetailer[roundSim]+=costBackorderRetailer[roundSim],orderMadeByRetailerMinus2[roundSim]=orderMadeByRetailerMinus1[roundSim],orderMadeByRetailerMinus1[roundSim]="NA",orderMadeByRetailerMinus1[roundSim]=parseFloat(retailerOrderInput.value()),displayAll())}function generateCharts(){switch(role){case"Admin":generateChartsAll();break;case"Retailer":generateChartsRetailer()}}function generateChartsAll(){localStorage.setItem("list_orders_retailer",JSON.stringify(orderMadeByRetailerMinus1)),localStorage.setItem("list_inventory_retailer",JSON.stringify(inventoryRetailer)),localStorage.setItem("list_backorder_retailer",JSON.stringify(backorderRetailer)),localStorage.setItem("list_orders_warehouse",JSON.stringify(orderMadeByWarehouseMinus1)),localStorage.setItem("list_inventory_warehouse",JSON.stringify(inventoryWarehouse)),localStorage.setItem("list_backorder_warehouse",JSON.stringify(backorderWarehouse)),localStorage.setItem("list_orders_DC",JSON.stringify(orderMadeByDCMinus1)),localStorage.setItem("list_inventory_DC",JSON.stringify(inventoryDC)),localStorage.setItem("list_backorder_DC",JSON.stringify(backorderDC)),localStorage.setItem("list_orders_factory",JSON.stringify(quantityInProduction1)),localStorage.setItem("list_inventory_factory",JSON.stringify(inventoryFactory)),localStorage.setItem("list_backorder_factory",JSON.stringify(backorderFactory));window.open(url="charts/chartsAll.html")}function generateChartsRetailer(){localStorage.setItem("list_orders_retailer",JSON.stringify(orderMadeByRetailerMinus1)),localStorage.setItem("list_inventory_retailer",JSON.stringify(inventoryRetailer)),localStorage.setItem("list_backorder_retailer",JSON.stringify(backorderRetailer));window.open(url="charts/chartsRetailer.html")}function generateTables(){switch(role){case"Admin":generateTablesAll();break;case"Retailer":generateTablesRetailer()}}function generateTablesAll(){localStorage.setItem("list_orders_retailer",JSON.stringify(orderMadeByRetailerMinus1)),localStorage.setItem("list_inventory_retailer",JSON.stringify(inventoryRetailer)),localStorage.setItem("list_backorder_retailer",JSON.stringify(backorderRetailer)),localStorage.setItem("list_orders_warehouse",JSON.stringify(orderMadeByWarehouseMinus1)),localStorage.setItem("list_inventory_warehouse",JSON.stringify(inventoryWarehouse)),localStorage.setItem("list_backorder_warehouse",JSON.stringify(backorderWarehouse)),localStorage.setItem("list_orders_DC",JSON.stringify(orderMadeByDCMinus1)),localStorage.setItem("list_inventory_DC",JSON.stringify(inventoryDC)),localStorage.setItem("list_backorder_DC",JSON.stringify(backorderDC)),
localStorage.setItem("list_orders_factory",JSON.stringify(quantityInProduction1)),localStorage.setItem("list_inventory_factory",JSON.stringify(inventoryFactory)),localStorage.setItem("list_backorder_factory",JSON.stringify(backorderFactory));window.open(url="charts/TablesAll.html")}function generateTablesRetailer(){localStorage.setItem("list_orders_retailer",JSON.stringify(orderMadeByRetailerMinus1)),localStorage.setItem("list_inventory_retailer",JSON.stringify(inventoryRetailer)),localStorage.setItem("list_backorder_retailer",JSON.stringify(backorderRetailer));window.open(url="charts/TablesRetailer.html")}function checkAdminPassword(){passwordEntered=adminPasswordInput.value(),adminPasswordInput.value(""),"admin"==passwordEntered?adminPasswordSuccess=1:alert("Wrong password!")}function displayRetailerOnly(){clear(),displayInit(),displayRound(),displayRetailer(),displayRetailerPlus()}function displayWarehouseOnly(){clear(),displayInit(),displayRound(),displayWarehouse(),displayWarehousePlus()}function displayDCOnly(){clear(),displayInit(),displayRound(),displayDC(),displayDCPlus()}function displayFactoryOnly(){clear(),displayInit(),displayRound(),displayFactory(),displayFactoryPlus()}function displayRetailer(){fill(0,0,0),textSize(14),text("Retailer",20,60),textSize(11),text("Order Received: "+orderReceivedByRetailer[roundSim],20,80),text(orderReceivedByRetailer[roundSim],25,275),text("Order Made - 1: "+orderMadeByRetailerMinus1[roundSim],20,95),text(orderMadeByRetailerMinus1[roundSim],195,275),text("Order Made - 2: "+orderMadeByRetailerMinus2[roundSim],20,110),text(orderMadeByRetailerMinus2[roundSim],245,275),text("Qty Delivered: "+quantityDeliveredByRetailer[roundSim],20,125),text(quantityDeliveredByRetailer[roundSim],27,335),text("Qty Received: "+quantityReceivedByRetailer[roundSim],20,140),text(quantityReceivedByRetailer[roundSim],237,335),text("Inventory: "+inventoryRetailer[roundSim],20,155),text(inventoryRetailer[roundSim],155,315),text("Backorder: "+backorderRetailer[roundSim],20,170),text(backorderRetailer[roundSim],155,335),text("Cost Inventory: "+costInventoryRetailer[roundSim]+" - cumul.: "+cumcostInventoryRetailer[roundSim],20,210),text("Cost Backorder: "+costBackorderRetailer[roundSim]+" - cumul.: "+cumcostBackorderRetailer[roundSim],20,225),text("Order",20,445)}function displayRetailerPlus(){text("Qty. Received",200,395)}function displayWarehouse(){fill(0,0,0),textSize(14),text("Warehouse",320,60),textSize(11),text("Order Received: "+orderReceivedByWarehouse[roundSim],320,80),text(orderReceivedByWarehouse[roundSim],325,275),text("Order Made - 1: "+orderMadeByWarehouseMinus1[roundSim],320,95),text(orderMadeByWarehouseMinus1[roundSim],495,275),text("Order Made - 2: "+orderMadeByWarehouseMinus2[roundSim],320,110),text(orderMadeByWarehouseMinus2[roundSim],545,275),text("Qty Delivered in Transit 1: "+quantityDeliveredByWarehouseTransit1[roundSim],320,125),text(quantityDeliveredByWarehouseTransit1[roundSim],367,335),text("Qty Delivered in Transit 2: "+quantityDeliveredByWarehouseTransit2[roundSim],320,140),text(quantityDeliveredByWarehouseTransit2[roundSim],327,335),text("Qty Received: "+quantityReceivedByWarehouse[roundSim],320,155),text(quantityReceivedByWarehouse[roundSim],537,335),text("Inventory: "+inventoryWarehouse[roundSim],320,170),text(inventoryWarehouse[roundSim],455,315),text("Backorder: "+backorderWarehouse[roundSim],320,185),text(backorderWarehouse[roundSim],455,335),text("Cost Inventory: "+costInventoryWarehouse[roundSim]+" - cumul.: "+cumcostInventoryWarehouse[roundSim],320,210),text("Cost Backorder: "+costBackorderWarehouse[roundSim]+" - cumul.: "+cumcostBackorderWarehouse[roundSim],320,225),text("Order",320,445)}function displayWarehousePlus(){text("Order Received",320,395),text("Qty. Received",500,395)}function displayDC(){fill(0,0,0),textSize(14),text("DC",620,60),textSize(11),text("Order Received: "+orderReceivedByDC[roundSim],620,80),text(orderReceivedByDC[roundSim],625,275),text("Order Made - 1: "+orderMadeByDCMinus1[roundSim],620,95),text(orderMadeByDCMinus1[roundSim],795,275),text("Order Made - 2: "+orderMadeByDCMinus2[roundSim],620,110),text(orderMadeByDCMinus2[roundSim],845,275),text("Qty Delivered in Transit 1: "+quantityDeliveredByDCTransit1[roundSim],620,125),text(quantityDeliveredByDCTransit1[roundSim],667,335),text("Qty Delivered in Transit 2: "+quantityDeliveredByDCTransit2[roundSim],620,140),text(quantityDeliveredByDCTransit2[roundSim],627,335),text("Qty Received: "+quantityReceivedByDC[roundSim],620,155),text(quantityReceivedByDC[roundSim],837,335),text("Inventory: "+inventoryDC[roundSim],620,170),text(inventoryDC[roundSim],755,315),text("Backorder: "+backorderDC[roundSim],620,185),text(backorderDC[roundSim],755,335),text("Cost Inventory: "+costInventoryDC[roundSim]+" - cumul.: "+cumcostInventoryDC[roundSim],620,210),text("Cost Backorder: "+costBackorderDC[roundSim]+" - cumul.: "+cumcostBackorderDC[roundSim],620,225),text("Order",620,445)}function displayDCPlus(){text("Order Received",620,395),text("Qty. Received",800,395)}function displayFactory(){fill(0,0,0),textSize(14),text("Factory",920,60),textSize(11),text("Order Received: "+orderReceivedByFactory[roundSim],920,80),text(orderReceivedByFactory[roundSim],925,275),text("Qty Delivered in Transit 1: "+quantityDeliveredByFactoryTransit1[roundSim],920,95),text(quantityDeliveredByFactoryTransit1[roundSim],967,335),text("Qty Delivered in Transit 2: "+quantityDeliveredByFactoryTransit2[roundSim],920,110),text(quantityDeliveredByFactoryTransit2[roundSim],927,335),text("Qty in Production 1: "+quantityInProduction1[roundSim],920,125),text(quantityInProduction1[roundSim],1095,275),text("Qty in Production 2: "+quantityInProduction2[roundSim],920,140),text(quantityInProduction2[roundSim],1145,275),text("Qty in Production 3: "+quantityInProduction3[roundSim],920,155),text(quantityInProduction3[roundSim],1137,335),text("Inventory: "+inventoryFactory[roundSim],920,170),text(inventoryFactory[roundSim],1055,315),text("Backorder: "+backorderFactory[roundSim],920,185),text(backorderFactory[roundSim],1055,335),text("Cost Inventory: "+costInventoryFactory[roundSim]+" - cumul.: "+cumcostInventoryFactory[roundSim],920,210),text("Cost Backorder: "+costBackorderFactory[roundSim]+" - cumul.: "+cumcostBackorderFactory[roundSim],920,225),text("Order",920,445)}function displayFactoryPlus(){text("Order Received",920,395),text("Qty. Received",1100,395)}function displayInit(){fill(0,0,0),textSize(18),text("Playing as: [A]dmin, [R]etailer, [W]arehouse, [D]C, [F]actory?",20,20),text("Password (for Admin):",600,20),textSize(14),text("Retailer",20,60),text("Warehouse",320,60),text("DC",620,60),text("Factory",920,60),textSize(18),text("Game Log",1220,20),text("Game Parameters",1220,400),noFill(),rect(20,260,40,20),rect(190,260,40,20),rect(240,260,40,20),rect(120,300,30,20),rect(150,300,40,20),rect(120,320,30,20),rect(150,320,40,20),fill(0,0,0),textSize(10),text("Inventory",120,295),text("OH",125,315),text("BO",125,335),noFill(),triangle(20,340,50,340,35,310),triangle(230,340,260,340,245,310),noFill(),rect(320,260,40,20),rect(490,260,40,20),rect(540,260,40,20),rect(420,300,30,20),rect(450,300,40,20),rect(420,320,30,20),rect(450,320,40,20),fill(0,0,0),textSize(10),text("Inventory",420,295),text("OH",425,315),text("BO",425,335),noFill(),triangle(320,340,350,340,335,310),triangle(360,340,390,340,375,310),triangle(530,340,560,340,545,310),noFill(),rect(620,260,40,20),rect(790,260,40,20),rect(840,260,40,20),rect(720,300,30,20),rect(750,300,40,20),rect(720,320,30,20),rect(750,320,40,20),fill(0,0,0),textSize(10),text("Inventory",720,295),text("OH",725,315),text("BO",725,335),noFill(),triangle(620,340,650,340,635,310),triangle(660,340,690,340,675,310),triangle(830,340,860,340,845,310),noFill(),rect(920,260,40,20),rect(1090,260,40,20),rect(1140,260,40,20),rect(1020,300,30,20),rect(1050,300,40,20),rect(1020,320,30,20),rect(1050,320,40,20),fill(0,0,0),textSize(10),text("Inventory",1020,295),text("OH",1025,315),text("BO",1025,335),noFill(),triangle(920,340,950,340,935,310),triangle(960,340,990,340,975,310),triangle(1130,340,1160,340,1145,310),fill(0,0,0),textSize(10),text("Range Cust. Orders",1220,470)}function displayRound(){textSize(12),fill(0,0,0),text("You are playing as the "+role,1240,80),text("---------------------------------------",1240,100),text("Round: "+roundSim+" - Step: "+stepInRound,1240,120),text("---------------------------------------",1240,140),text("Event: ",1240,160),text(message,1240,180),text("---------------------------------------",1240,200),text("Action needed: ",1240,220),text(actionReq,1240,240),text("---------------------------------------",1240,260)}function displayAll(){clear(),displayInit(),displayRound(),displayRetailer(),displayWarehouse(),displayDC(),displayFactory()}function updateParameters(){"Admin"==role&&(minOrderSize=parseFloat(minOrderSizeInput.value()),maxOrderSize=parseFloat(maxOrderSizeInput.value()),minOrderSizeInput.value(""),maxOrderSizeInput.value(""))}var canvas,myInitButton,myNextStepButton,myNextRoundButton,mySummaryButton,myUpdateParametersButton,retailerOrderInput,warehouseOrderInput,DCOrderInput,factoryOrderInput,retailerQtyReceived,warehouseQtyReceived,DCQtyReceived,factoryQtyReceived,warehouseOrderReceived,DCOrderReceived,factoryOrderReceived,roundSim,stepInRound,role,roleInput,adminPasswordInput,message,actionReq,orderReceivedByRetailer=[],orderMadeByRetailerMinus1=[],orderMadeByRetailerMinus2=[],quantityDeliveredByRetailer=[],quantityReceivedByRetailer=[],inventoryRetailer=[],backorderRetailer=[],costInventoryRetailer=[],cumcostInventoryRetailer=[],costBackorderRetailer=[],cumcostBackorderRetailer=[],orderReceivedByWarehouse=[],orderMadeByWarehouseMinus1=[],orderMadeByWarehouseMinus2=[],quantityDeliveredByWarehouseTransit1=[],quantityDeliveredByWarehouseTransit2=[],quantityReceivedByWarehouse=[],inventoryWarehouse=[],backorderWarehouse=[],costInventoryWarehouse=[],cumcostInventoryWarehouse=[],costBackorderWarehouse=[],cumcostBackorderWarehouse=[],orderReceivedByDC=[],orderMadeByDCMinus1=[],orderMadeByDCMinus2=[],quantityDeliveredByDCTransit1=[],quantityDeliveredByDCTransit2=[],quantityReceivedByDC=[],inventoryDC=[],backorderDC=[],costInventoryDC=[],cumcostInventoryDC=[],costBackorderDC=[],cumcostBackorderDC=[],orderReceivedByFactory=[],quantityDeliveredByFactoryTransit1=[],quantityDeliveredByFactoryTransit2=[],quantityInProduction1=[],quantityInProduction2=[],quantityInProduction3=[],inventoryFactory=[],backorderFactory=[],costInventoryFactory=[],cumcostInventoryFactory=[],costBackorderFactory=[],cumcostBackorderFactory=[],maxOrderSize,maxOrderSizeInput,minOrderSize,minOrderSizeInput,UCInventoryRetailer,UCInventoryWarehouse,UCInventoryDC,UCInventoryFactory,UCBackorderRetailer,UCBackorderWarehouse,UCBackorderDC,UCBackorderFactory,adminPasswordSuccess=0,passwordEntered;